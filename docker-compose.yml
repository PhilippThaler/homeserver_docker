name: compose
services:
  bitwarden:
    container_name: bitwarden
    environment:
      ADMIN_TOKEN: ${BITWARDEN_ADMIN_TOKEN}
      DATABASE_URL: ${BITWARDEN_DATABASE_URL}
      DISABLE_ADMIN_TOKEN: ${BITWARDEN_DISABLE_ADMIN_TOKEN}
      DOMAIN: ${BITWARDEN_DOMAIN}
      ENABLE_DB_WAL: ${BITWARDEN_ENABLE_DB_WAL}
      INVITATIONS_ALLOWED: ${BITWARDEN_INVITATIONS_ALLOWED}
      SHOW_PASSWORD_HINT: ${BITWARDEN_SHOW_PASSWORD_HINT}
      SIGNUPS_ALLOWED: ${BITWARDEN_SIGNUPS_ALLOWED}
      SIGNUPS_VERIFY: ${BITWARDEN_SIGNUPS_VERIFY}
      TZ: ${TZ}
      WEBSOCKET_ENABLED: ${BITWARDEN_WEBSOCKET_ENABLE}
    hostname: ${DOCKERHOSTNAME}
    image: vaultwarden/server
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: ${BITWARDEN_PORT_80}
      protocol: tcp
    - mode: ingress
      target: 3012
      published: ${BITWARDEN_PORT_3012}
      protocol: tcp
    restart: ${BITWARDEN_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/bitwarden
      target: /data
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  cloudflareddns:
    container_name: cloudflareddns
    environment:
      ARGS: ""
      CF_APIKEY: ${CLOUDFLAREDDNS_APIKEY}
      CF_APITOKEN: ${CLOUDFLAREDDNS_APITOKEN}
      CF_HOSTS: ${CLOUDFLAREDDNS_HOSTS}
      CF_RECORDTYPES: ${CLOUDFLAREDDNS_RECORDTYPES}
      CF_USER: ${CLOUDFLAREDDNS_USER}
      CF_ZONES: ${CLOUDFLAREDDNS_ZONES}
      DETECTION_MODE: ${CLOUDFLAREDDNS_DETECTION_MODE}
      INTERVAL: ${CLOUDFLAREDDNS_INTERVAL}
      LOG_LEVEL: ${CLOUDFLAREDDNS_LOG_LEVEL}
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: cr.hotio.dev/hotio/cloudflareddns
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    restart: unless-stopped
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/cloudflareddns
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  grafana:
    container_name: grafana
    environment:
      GF_INSTALL_PLUGINS: ${GRAFANA_GF_INSTALL_PLUGINS}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: grafana/grafana
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 3000
      published: ${GRAFANA_PORT_3000}
      protocol: tcp
    restart: ${GRAFANA_RESTART}
    user: ${PUID}:${PGID}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/grafana
      target: /var/lib/grafana
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  homeassistant:
    container_name: homeassistant
    environment:
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: homeassistant/home-assistant
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8123
      published: ${HOMEASSISTANT_PORT_8123}
      protocol: tcp
    restart: ${HOMEASSISTANT_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/homeassistant
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  jackett:
    container_name: jackett
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/jackett
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 9117
      published: ${JACKETT_PORT_9117}
      protocol: tcp
    restart: ${JACKETT_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/jackett
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  jellyfin:
    container_name: jellyfin
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/jellyfin
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8096
      published: ${JELLYFIN_PORT_8096}
      protocol: tcp
    - mode: ingress
      target: 8920
      published: ${JELLYFIN_PORT_8920}
      protocol: tcp
    restart: ${JELLYFIN_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/jellyfin
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
    - type: bind
      source: /tmp
      target: /transcode
      bind:
        create_host_path: true
  monitorr:
    container_name: monitorr
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: monitorr/monitorr
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: ${MONITORR_PORT_80}
      protocol: tcp
    restart: ${MONITORR_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/monitorr
      target: /app
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  mosquitto:
    container_name: mosquitto
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: eclipse-mosquitto
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    network_mode: ${MOSQUITTO_NETWORK_MODE}
    restart: ${MOSQUITTO_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/mosquitto
      target: /mosquitto/config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/mosquitto/data
      target: /mosquitto/data
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/mosquitto/log
      target: /mosquitto/log
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  nextcloud:
    container_name: nextcloud
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/nextcloud
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 443
      published: ${NEXTCLOUD_PORT_443}
      protocol: tcp
    restart: ${NEXTCLOUD_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/nextcloud
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}/nextcloud
      target: /data
      bind:
        create_host_path: true
  nodered:
    container_name: nodered
    environment:
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: nodered/node-red
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 1880
      published: ${NODERED_PORT_1880}
      protocol: tcp
    restart: ${NODERED_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/nodered
      target: /data
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  pihole:
    cap_add:
    - NET_ADMIN
    container_name: pihole
    dns:
    - 127.0.0.1
    - ${NS1}
    - ${NS2}
    environment:
      DNS1: ${NS1}
      DNS2: ${NS2}
      ServerIP: ${PIHOLE_SERVERIP}
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
    hostname: ${DOCKERHOSTNAME}
    image: pihole/pihole
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      host_ip: ${PIHOLE_SERVERIP}
      target: 53
      published: ${PIHOLE_PORT_53}
      protocol: tcp
    - mode: ingress
      host_ip: ${PIHOLE_SERVERIP}
      target: 53
      published: ${PIHOLE_PORT_53}
      protocol: udp
    - mode: ingress
      host_ip: ${PIHOLE_SERVERIP}
      target: 67
      published: ${PIHOLE_PORT_67}
      protocol: udp
    - mode: ingress
      target: 80
      published: ${PIHOLE_PORT_80}
      protocol: tcp
    - mode: ingress
      target: 443
      published: ${PIHOLE_PORT_443}
      protocol: tcp
    restart: ${PIHOLE_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/pihole/dnsmasq.d
      target: /etc/dnsmasq.d
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/pihole/pihole
      target: /etc/pihole
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  portainer:
    command:
    - -H
    - unix:///var/run/docker.sock
    container_name: portainer
    environment:
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: portainer/portainer-ce
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 9000
      published: ${PORTAINER_PORT_9000}
      protocol: tcp
    restart: ${PORTAINER_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/portainer
      target: /data
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  radarr:
    container_name: radarr
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/radarr
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 7878
      published: ${RADARR_PORT_7878}
      protocol: tcp
    restart: ${RADARR_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/radarr
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  rtorrentvpn:
    cap_add:
    - NET_ADMIN
    - SYS_MODULE
    container_name: rtorrentvpn
    environment:
      ENABLE_AUTODL_IRSSI: ${RTORRENTVPN_ENABLE_AUTODL_IRSSI}
      ENABLE_PRIVOXY: ${RTORRENTVPN_ENABLE_PRIVOXY}
      ENABLE_RPC2: ${RTORRENTVPN_ENABLE_RPC2}
      ENABLE_RPC2_AUTH: ${RTORRENTVPN_ENABLE_RPC2_AUTH}
      ENABLE_WEBUI_AUTH: ${RTORRENTVPN_ENABLE_WEBUI_AUTH}
      LAN_NETWORK: ${LAN_NETWORK}
      NAME_SERVERS: ${NS1},${NS2}
      PGID: ${PGID}
      PHP_TZ: ${TZ}
      PUID: ${PUID}
      RPC2_PASS: ${RTORRENTVPN_RPC2_PASS}
      RPC2_USER: ${RTORRENTVPN_RPC2_USER}
      TZ: ${TZ}
      VPN_CLIENT: ${VPN_CLIENT}
      VPN_ENABLED: ${VPN_ENABLE}
      VPN_OPTIONS: ${VPN_OPTIONS}
      VPN_PASS: ${VPN_PASS}
      VPN_PROV: ${VPN_PROV}
      VPN_USER: ${VPN_USER}
      WEBUI_PASS: ${RTORRENTVPN_WEBUI_PASS}
      WEBUI_USER: ${RTORRENTVPN_WEBUI_USER}
    hostname: ${DOCKERHOSTNAME}
    image: ghcr.io/binhex/arch-rtorrentvpn
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6881
      published: ${RTORRENTVPN_PORT_6881}
      protocol: tcp
    - mode: ingress
      target: 6881
      published: ${RTORRENTVPN_PORT_6881}
      protocol: udp
    - mode: ingress
      target: 8118
      published: ${RTORRENTVPN_PORT_8118}
      protocol: tcp
    - mode: ingress
      target: 9080
      published: ${RTORRENTVPN_PORT_9080}
      protocol: tcp
    - mode: ingress
      target: 9443
      published: ${RTORRENTVPN_PORT_9443}
      protocol: tcp
    - mode: ingress
      target: 51413
      published: ${RTORRENTVPN_PORT_51413}
      protocol: tcp
    - mode: ingress
      target: 51413
      published: ${RTORRENTVPN_PORT_51413}
      protocol: udp
    privileged: true
    restart: ${RTORRENTVPN_RESTART}
    sysctls:
      net.ipv4.conf.all.src_valid_mark: "1"
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/rtorrentvpn
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/.openvpn
      target: /config/openvpn
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/.wireguard
      target: /config/wireguard
      bind:
        create_host_path: true
  samba:
    container_name: samba
    environment:
      GROUPID: ${PGID}
      NMBD: ${SAMBA_NMBD}
      SHARE: ${SAMBA_SHARENAME};/${SAMBA_SHARENAME};yes;no;no;all;${SAMBA_USERNAME}
      TZ: ${TZ}
      USER: ${SAMBA_USERNAME};${SAMBA_PASSWORD}
      USERID: ${PUID}
      WORKGROUP: ${SAMBA_WORKGROUP}
    hostname: ${DOCKERHOSTNAME}
    image: dperson/samba
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 137
      published: ${SAMBA_PORT_137}
      protocol: udp
    - mode: ingress
      target: 138
      published: ${SAMBA_PORT_138}
      protocol: udp
    - mode: ingress
      target: 139
      published: ${SAMBA_PORT_139}
      protocol: tcp
    - mode: ingress
      target: 445
      published: ${SAMBA_PORT_445}
      protocol: tcp
    restart: ${SAMBA_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}
      target: /share/config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /share/storage
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  sonarr:
    container_name: sonarr
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/sonarr
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8989
      published: ${SONARR_PORT_8989}
      protocol: tcp
    restart: ${SONARR_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/sonarr
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  swag:
    cap_add:
    - NET_ADMIN
    container_name: swag
    environment:
      DNSPLUGIN: ${SWAG_DNSPLUGIN}
      DUCKDNSTOKEN: ${SWAG_DUCKDNSTOKEN}
      EMAIL: ${SWAG_EMAIL}
      EXTRA_DOMAINS: ${SWAG_EXTRA_DOMAINS}
      MAXMINDDB_LICENSE_KEY: ${SWAG_MAXMINDDB_LICENSE_KEY}
      ONLY_SUBDOMAINS: ${SWAG_ONLY_SUBDOMAINS}
      PGID: ${PGID}
      PUID: ${PUID}
      SUBDOMAINS: ${SWAG_SUBDOMAINS}
      TZ: ${TZ}
      URL: ${SWAG_URL}
      VALIDATION: ${SWAG_VALIDATION}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/swag
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: ${SWAG_PORT_80}
      protocol: tcp
    - mode: ingress
      target: 443
      published: ${SWAG_PORT_443}
      protocol: tcp
    restart: ${SWAG_RESTART}
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/swag
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
  wireguard:
    cap_add:
    - NET_ADMIN
    - SYS_MODULE
    container_name: wireguard
    environment:
      ALLOWEDIPS: ${WIREGUARD_ALLOWED_IPS}
      INTERNAL_SUBNET: ${WIREGUARD_INTERNAL_SUBNET}
      PEERDNS: ${WIREGUARD_PEER_DNS}
      PEERS: ${WIREGUARD_PEERS}
      PGID: ${PGID}
      PUID: ${PUID}
      SERVERPORT: ${WIREGUARD_SERVER_PORT_51820}
      SERVERURL: ${WIREGUARD_SERVER_URL}
      TZ: ${TZ}
    hostname: ${DOCKERHOSTNAME}
    image: lscr.io/linuxserver/wireguard
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    networks:
      default: null
    ports:
    - mode: ingress
      target: 51820
      published: ${WIREGUARD_SERVER_PORT_51820}
      protocol: udp
    restart: ${WIREGUARD_RESTART}
    sysctls:
      net.ipv4.conf.all.src_valid_mark: "1"
    volumes:
    - type: bind
      source: /etc/localtime
      target: /etc/localtime
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: /lib/modules
      target: /lib/modules
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERCONFDIR}/wireguard
      target: /config
      bind:
        create_host_path: true
    - type: bind
      source: ${DOCKERSTORAGEDIR}
      target: /storage
      bind:
        create_host_path: true
networks:
  default:
    name: compose_default
